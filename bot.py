import os
import yt_dlp
import logging
from dotenv import load_dotenv
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import RPCError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def validate_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    required_vars = {
        'API_ID': int,
        'API_HASH': str,
        'BOT_TOKEN': str
    }
    
    for var, var_type in required_vars.items():
        value = os.getenv(var)
        if not value:
            logger.error(f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var}')
            exit(1)
        
        try:
            if var_type == int:
                int(value)
        except ValueError:
            logger.error(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {var}. –û–∂–∏–¥–∞–µ—Ç—Å—è {var_type.__name__}')
            exit(1)

validate_config()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB - –ª–∏–º–∏—Ç Telegram

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
os.makedirs("downloads", exist_ok=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è yt-dlp
BASE_YDL_OPTS = {
    "quiet": True,
    "no_warnings": True,
    "noplaylist": True,
    "extract_flat": False,
    "socket_timeout": 30,
    "retries": 3,
}

YDL_OPTS_VIDEO = {
    **BASE_YDL_OPTS,
    "format": "bestvideo[height<=1080]+bestaudio/best[height<=1080]",
    "outtmpl": "downloads/%(title)s.%(ext)s",
    "merge_output_format": "mp4",
}

YDL_OPTS_AUDIO = {
    **BASE_YDL_OPTS,
    "format": "bestaudio/best",
    "outtmpl": "downloads/%(title)s.%(ext)s",
    "postprocessors": [{
        "key": "FFmpegExtractAudio",
        "preferredcodec": "mp3",
        "preferredquality": "192",
    }],
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram
try:
    app = Client(
        "music_bot",
        api_id=API_ID,
        api_hash=API_HASH,
        bot_token=BOT_TOKEN,
        workers=4,
        sleep_threshold=30
    )
    logger.info("Pyrogram –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    exit(1)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤—ã–±–æ—Ä–æ–≤
user_choices = {}

def progress_hook(msg: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
    last_update = {'percent': 0, 'time': 0}
    
    def hook(d):
        import time
        
        if d['status'] == 'downloading':
            percent = float(d.get('_percent_str', '0').replace('%', '') or 0
            now = time.time()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
            if percent != last_update['percent'] and now - last_update['time'] > 2:
                last_update['percent'] = percent
                last_update['time'] = now
                
                try:
                    progress_bar = f"[{'‚ñà' * int(percent // 5)}{'‚ñë' * (20 - int(percent // 5))}]"
                    text = f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é... {progress_bar} {percent:.1f}%"
                    app.loop.create_task(msg.edit(text))
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        
        elif d['status'] == 'finished':
            try:
                app.loop.create_task(msg.edit("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."))
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    return hook

@app.on_message(filters.command(["start", "help"]))
async def start_cmd(client: Client, message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ start –∏ help"""
    try:
        text = (
            "üé¨ <b>YouTube/TikTok Downloader Bot</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è –≤–∞—Å!\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n"
            "- YouTube\n"
            "- TikTok\n"
            "- Instagram Reels\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."
        )
        await message.reply(text)
    except RPCError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_cmd: {e}")

@app.on_message(filters.text & ~filters.command(["start", "help"]))
async def handle_url(client: Client, message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    url = message.text.strip()
    user_id = message.from_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not any(domain in url for domain in ('youtube.com', 'youtu.be', 'tiktok.com', 'instagram.com')):
        await message.reply("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ —Å YouTube, TikTok –∏ Instagram Reels")
        return
    
    user_choices[user_id] = {'url': url}
    
    try:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üé• –í–∏–¥–µ–æ (MP4)", callback_data="video"),
             InlineKeyboardButton("üéß –ê—É–¥–∏–æ (MP3)", callback_data="audio")]
        ])
        await message.reply(
            "üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
    except RPCError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@app.on_callback_query()
async def callback_handler(client: Client, callback_query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    if user_id not in user_choices:
        await callback_query.answer("‚ùå –°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é.")
        return
    
    url = user_choices[user_id]['url']
    await callback_query.answer()
    
    try:
        progress_msg = await callback_query.message.reply("‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
        
        opts = YDL_OPTS_VIDEO if data == "video" else YDL_OPTS_AUDIO
        opts['progress_hooks'] = [progress_hook(progress_msg)]
        
        with yt_dlp.YoutubeDL(opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            
            if data == "audio":
                filename = os.path.splitext(filename)[0] + ".mp3"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(filename)
            if file_size > MAX_FILE_SIZE:
                raise ValueError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size/1024/1024:.1f}MB). –õ–∏–º–∏—Ç Telegram: {MAX_FILE_SIZE/1024/1024}MB")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            if data == "audio":
                await callback_query.message.reply_audio(
                    audio=filename,
                    title=info.get('title', '–ê—É–¥–∏–æ')[:64],
                    performer=info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')[:32],
                    duration=info.get('duration', 0)
                )
            else:
                await callback_query.message.reply_video(
                    video=filename,
                    caption=info.get('title', '–í–∏–¥–µ–æ')[:1024],
                    duration=info.get('duration', 0),
                    width=info.get('width', 0),
                    height=info.get('height', 0)
                )
            
            await progress_msg.delete()
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {filename}")
            
    except yt_dlp.DownloadError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        await progress_msg.edit("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
        await progress_msg.edit(f"‚ö†Ô∏è {e}")
    except RPCError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
        await progress_msg.edit("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await progress_msg.edit("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        if 'filename' in locals() and os.path.exists(filename):
            try:
                os.remove(filename)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        
        user_choices.pop(user_id, None)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        app.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        exit(1)
