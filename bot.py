import os
import yt_dlp
import logging
from dotenv import load_dotenv
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import RPCError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("MusicFetcherBot")

load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ–± –Ω–µ —É–ø–∞—Å—Ç—å –±–µ–∑ –Ω–∏—Ö
required_vars = ["API_ID", "API_HASH", "BOT_TOKEN"]
for var in required_vars:
    if not os.getenv(var):
        logger.error(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è.")
        exit(1)

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
os.makedirs("downloads", exist_ok=True)

# –û–ø—Ü–∏–∏ yt-dlp –¥–ª—è –≤–∏–¥–µ–æ
YDL_OPTS_VIDEO = {
    "format": "bestvideo+bestaudio/best",
    "outtmpl": "downloads/%(title)s.%(ext)s",
    "merge_output_format": "mp4",
    "quiet": True,
    "noplaylist": True,
    "extract_flat": False,
}

# –û–ø—Ü–∏–∏ yt-dlp –¥–ª—è –∞—É–¥–∏–æ
YDL_OPTS_AUDIO = {
    "format": "bestaudio/best",
    "outtmpl": "downloads/%(title)s.%(ext)s",
    "quiet": True,
    "noplaylist": True,
    "extract_flat": False,
    "postprocessors": [{
        "key": "FFmpegExtractAudio",
        "preferredcodec": "mp3",
        "preferredquality": "192",
    }],
}

app = Client("music_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

user_choices = {}

def progress_hook(msg: Message):
    last_percent = {'value': 0}

    def hook(d):
        if d['status'] == 'downloading':
            percent = d.get('_percent_str', '0%').strip()
            if percent != last_percent['value']:
                last_percent['value'] = percent
                try:
                    app.loop.create_task(msg.edit(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é... {percent}"))
                except Exception as e:
                    logger.warning(f"–ù–µ —Å–º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: {e}")
        elif d['status'] == 'finished':
            try:
                app.loop.create_task(msg.edit("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."))
            except Exception as e:
                logger.warning(f"–ù–µ —Å–º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    return hook

@app.on_message(filters.command("start"))
async def start_cmd(client: Client, message: Message):
    try:
        await message.reply("üé¨ –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∏–ª–∏ TikTok ‚Äî –≤—ã–±–µ—Ä–µ—à—å –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ, —è —Å–∫–∞—á–∞—é!")
    except RPCError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_cmd: {e}")

@app.on_message(filters.text & ~filters.command(["start", "help"]))
async def handle_url(client: Client, message: Message):
    url = message.text.strip()
    if not url.startswith(("http://", "https://")):
        await message.reply("‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
        return

    user_id = message.from_user.id
    user_choices[user_id] = {"url": url}

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üé• –í–∏–¥–µ–æ", callback_data="video"),
         InlineKeyboardButton("üéß –ê—É–¥–∏–æ", callback_data="audio")]
    ])

    try:
        await message.reply("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    except RPCError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@app.on_callback_query()
async def callback_handler(client: Client, callback_query):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if user_id not in user_choices:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É.")
        return

    url = user_choices[user_id]["url"]
    await callback_query.answer()

    progress_msg = await callback_query.message.reply("üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
    opts = YDL_OPTS_VIDEO if data == "video" else YDL_OPTS_AUDIO
    opts["progress_hooks"] = [progress_hook(progress_msg)]

    filename = None
    try:
        with yt_dlp.YoutubeDL(opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            if data == "audio":
                filename = os.path.splitext(filename)[0] + ".mp3"

            if os.path.getsize(filename) > 50 * 1024 * 1024:
                raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram (–±–æ–ª—å—à–µ 50 –ú–ë).")

            if data == "audio":
                await callback_query.message.reply_audio(
                    audio=filename,
                    title=info.get("title", "–ê—É–¥–∏–æ"),
                    performer=info.get("uploader", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
                )
            else:
                await callback_query.message.reply_video(
                    video=filename,
                    caption=info.get("title", "–í–∏–¥–µ–æ")
                )

        await progress_msg.delete()

    except yt_dlp.DownloadError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        await progress_msg.edit("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
    except RPCError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
        await progress_msg.edit("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    except ValueError as e:
        logger.warning(str(e))
        await progress_msg.edit(f"‚ö†Ô∏è {str(e)}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await progress_msg.edit("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    finally:
        if filename and os.path.exists(filename):
            try:
                os.remove(filename)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {filename}: {e}")
        user_choices.pop(user_id, None)

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    app.run()
