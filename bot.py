import os
import yt_dlp
import logging
from dotenv import load_dotenv
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import RPCError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_vars = ['API_ID', 'API_HASH', 'BOT_TOKEN']
for var in required_vars:
    if not os.getenv(var):
        logger.error(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è {var}')
        exit(1)

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
os.makedirs("downloads", exist_ok=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è yt-dlp
YDL_OPTS_VIDEO = {
    "format": "bestvideo+bestaudio/best",
    "outtmpl": "downloads/%(title)s.%(ext)s",
    "merge_output_format": "mp4",
    "quiet": True,
    "noplaylist": True,
    "extract_flat": False,
}

YDL_OPTS_AUDIO = {
    "format": "bestaudio/best",
    "outtmpl": "downloads/%(title)s.%(ext)s",
    "quiet": True,
    "noplaylist": True,
    "extract_flat": False,
    "postprocessors": [{
        "key": "FFmpegExtractAudio",
        "preferredcodec": "mp3",
        "preferredquality": "192",
    }],
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram
app = Client(
    "music_bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤—ã–±–æ—Ä–æ–≤
user_choices = {}

def progress_hook(msg: Message):
    last_percent = {'value': 0}
    
    def hook(d):
        if d['status'] == 'downloading':
            percent = d.get('_percent_str', '0%').strip()
            if percent != last_percent['value']:
                last_percent['value'] = percent
                try:
                    app.loop.create_task(
                        msg.edit(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é... {percent}")
                    )
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        elif d['status'] == 'finished':
            try:
                app.loop.create_task(
                    msg.edit("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
                )
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
    
    return hook

@app.on_message(filters.command("start"))
async def start_cmd(client: Client, message: Message):
    try:
        await message.reply(
            "üé¨ –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube –∏–ª–∏ TikTok, "
            "–∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è –≤ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–µ!"
        )
    except RPCError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_cmd: {e}")

@app.on_message(filters.text & ~filters.command(["start", "help"]))
async def handle_url(client: Client, message: Message):
    url = message.text.strip()
    if not url.startswith(('http://', 'https://')):
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
        return
    
    user_id = message.from_user.id
    user_choices[user_id] = {'url': url}
    
    try:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üé• –í–∏–¥–µ–æ", callback_data="video"),
             InlineKeyboardButton("üéß –ê—É–¥–∏–æ", callback_data="audio")]
        ])
        await message.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
    except RPCError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@app.on_callback_query()
async def callback_handler(client: Client, callback_query):
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    if user_id not in user_choices:
        await callback_query.answer("–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é.")
        return
    
    url = user_choices[user_id]['url']
    await callback_query.answer()
    
    try:
        progress_msg = await callback_query.message.reply("üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
        
        opts = YDL_OPTS_VIDEO if data == "video" else YDL_OPTS_AUDIO
        opts['progress_hooks'] = [progress_hook(progress_msg)]
        
        with yt_dlp.YoutubeDL(opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            
            if data == "audio":
                filename = os.path.splitext(filename)[0] + ".mp3"
            
            if os.path.getsize(filename) > 50 * 1024 * 1024:  # 50MB limit
                raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
            
            if data == "audio":
                await callback_query.message.reply_audio(
                    audio=filename,
                    title=info.get('title', '–ê—É–¥–∏–æ'),
                    performer=info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
                )
            else:
                await callback_query.message.reply_video(
                    video=filename,
                    caption=info.get('title', '–í–∏–¥–µ–æ')
                )
            
            await progress_msg.delete()
            os.remove(filename)
            
    except yt_dlp.DownloadError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        await progress_msg.edit("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
    except RPCError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
        await progress_msg.edit("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await progress_msg.edit("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
    finally:
        if 'filename' in locals() and os.path.exists(filename):
            os.remove(filename)
        user_choices.pop(user_id, None)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app.run()
